{"ast":null,"code":"import axios from \"axios\";\nimport { getCookie, setCookie } from \"./cookieUtil\";\n\n// jwt 엑시오스를 사용하면 앞으로 모든 axios는 jwtAxios = axios.get 같은 jwtAxios\n// 메소드를 사용해야한다 \n\nconst jwtAxios = axios.create();\nconst beforeReq = config => {\n  console.log(\"beforeREQUEST=========\");\n  const {\n    accessToken\n  } = getCookie(\"login\");\n  if (!accessToken) {\n    throw new Error(\"NO ACCESS TOKEN\");\n  }\n  const header = {\n    headers: {\n      \"Authorization\": `Bearer ${accessToken}`,\n      \"Content-Type\": \"application/x-www-form-urlencoded;charset=utf-8\"\n    }\n  };\n  config.headers.Authorization = `Bearer ${accessToken}`;\n  return config;\n};\nconst requestFail = err => {\n  console.log(\"request Fail ===========\");\n  return Promise.reject(err);\n};\nconst beforeRes = async res => {\n  console.log(\"2XX Reponse .........\");\n  // 만료되었다면 \n  if (res.data.error === 'Expired') {\n    console.log(\"Access Token 만료\");\n    const newAccessToken = await refreshJWT();\n    originalRequest.headers.Authorization = `Bearer ${newAccessToken}`;\n    return await axios(originalRequest);\n  }\n  return res;\n};\n\n// jwt 토큰 리프레쉬 \nconst refreshJWT = async () => {\n  const cookieValue = getCookie(\"login\");\n  const {\n    accessToken,\n    refreshToken\n  } = cookieValue;\n  const header = {\n    headers: {\n      \"Authorization\": `Bearer ${accessToken}`\n    }\n  };\n  const res = await axios.get(`http://localhost:8080/api/member/refresh?refreshToken=${refreshToken}`, header);\n  const newAccess = res.data.accessToken;\n  const newRefresh = res.data.refreshToken;\n  console.log(\"--------------------------------\");\n  console.log(\"new access :\" + newAccess);\n  console.log(\"new refresh :\" + newRefresh);\n  cookieValue.accessToken = newAccess;\n  cookieValue.refreshToken = newRefresh;\n  console.log(\"--------------------------------\");\n  console.log(cookieValue);\n  setCookie(\"login\", JSON.stringify(cookieValue), 1);\n  return newAccess;\n};\nconst responseFail = err => {\n  console.log(\"response fail .......\");\n  return Promise.reject(err);\n};\njwtAxios.interceptors.request.use(beforeReq, requestFail);\njwtAxios.interceptors.response.use(beforeReq, responseFail);\nexport default jwtAxios;","map":{"version":3,"names":["axios","getCookie","setCookie","jwtAxios","create","beforeReq","config","console","log","accessToken","Error","header","headers","Authorization","requestFail","err","Promise","reject","beforeRes","res","data","error","newAccessToken","refreshJWT","originalRequest","cookieValue","refreshToken","get","newAccess","newRefresh","JSON","stringify","responseFail","interceptors","request","use","response"],"sources":["/Users/gwonseongjun/리액트 프로젝트/r02/src/util/jwtUtil.js"],"sourcesContent":["\n\nimport axios from \"axios\";\nimport { getCookie, setCookie } from \"./cookieUtil\";\n\n// jwt 엑시오스를 사용하면 앞으로 모든 axios는 jwtAxios = axios.get 같은 jwtAxios\n// 메소드를 사용해야한다 \n\nconst jwtAxios = axios.create()\n\nconst beforeReq = (config) => {\n    console.log(\"beforeREQUEST=========\")\n\n    const { accessToken } = getCookie(\"login\")\n\n    if (!accessToken) {\n        throw new Error(\"NO ACCESS TOKEN\")\n    }\n\n    const header = {\n        headers: {\n            \"Authorization\": `Bearer ${accessToken}`,\n            \"Content-Type\": \"application/x-www-form-urlencoded;charset=utf-8\",\n        }\n    }\n\n    config.headers.Authorization = `Bearer ${accessToken}`\n\n    return config\n\n}\n\nconst requestFail = (err) => {\n    console.log(\"request Fail ===========\")\n    return Promise.reject(err)\n}\n\nconst beforeRes = async (res) => {\n    console.log(\"2XX Reponse .........\")\n    // 만료되었다면 \n    if (res.data.error === 'Expired') {\n        console.log(\"Access Token 만료\")\n        const newAccessToken = await refreshJWT()\n        \n        originalRequest.headers.Authorization = `Bearer ${newAccessToken}`\n        return await axios(originalRequest)\n    }\n    return res;\n}\n\n// jwt 토큰 리프레쉬 \nconst refreshJWT = async () => {\n\n    const cookieValue = getCookie(\"login\")\n\n    const {accessToken, refreshToken} = cookieValue\n\n    const header = {\n        headers: {\n            \"Authorization\": `Bearer ${accessToken}`\n        }\n    }\n\n    const res = await axios.get(`http://localhost:8080/api/member/refresh?refreshToken=${refreshToken}`, header)\n\n    const newAccess = res.data.accessToken\n    const newRefresh = res.data.refreshToken\n    console.log(\"--------------------------------\")\n    console.log(\"new access :\" + newAccess )\n    console.log(\"new refresh :\" + newRefresh)\n\n\n    cookieValue.accessToken = newAccess\n    cookieValue.refreshToken = newRefresh\n    console.log(\"--------------------------------\")\n    console.log(cookieValue)\n\n    setCookie(\"login\", JSON.stringify(cookieValue), 1)\n    \n    return newAccess \n}\n\n\nconst responseFail = (err) => {\n    console.log(\"response fail .......\");\n    return Promise.reject(err);\n}\n\njwtAxios.interceptors.request.use(beforeReq, requestFail)\njwtAxios.interceptors.response.use(beforeReq, responseFail)\n\nexport default jwtAxios\n\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}