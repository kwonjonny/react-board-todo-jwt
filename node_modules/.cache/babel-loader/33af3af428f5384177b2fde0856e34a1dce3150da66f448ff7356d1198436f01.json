{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\n\n// createSlice 객체 여러개 쓸거다 \nconst countSlice = createSlice({\n  // 이름 지정 \n  name: \"CountSlice\",\n  // 상태를 관리해야될 데이터의 초기상태 \n  initialState: {\n    num: 5\n  },\n  // reducer 는 동기화 처리 EX : => a바꾸면 b \n  // 객체 스타일 \n  reducers: {\n    // 증가 함수 첫번쨰 파라미터는 무조건 state\n    inc: (state, param) => {\n      console.log(\"inc 가 동작중: \", inc);\n      console.log(\"param 가 동작중: \", param);\n\n      // State안에는 num이 있고 \n      console.log(\"state 가 동작중: \", state);\n      // 새로운 상태를 바꾸기위해 state가 가지고있는 num값을 새로운 상태로 바꿔줌 \n      return {\n        num: state.num + 1\n      };\n    },\n    dec: (state, param) => {\n      console.log(\"dec가 동작중: \", dec);\n      console.log(\"param 가 동작중: \", param);\n\n      // State안에는 num이 있고 \n      console.log(\"state 가 동작중: \", state);\n      // 새로운 상태를 바꾸기위해 state가 가지고있는 num값을 새로운 상태로 바꿔줌 \n      return {\n        num: state.num - 1\n      };\n    }\n  }\n\n  // extraReducer 는 비동기 처리 \n});\n\n// 다른곳에서 쓰기위해 객체로 countSlice.actions로 정의 \nexport const {\n  inc,\n  dec\n} = countSlice.actions;\n\n// 외부에 노출은 reducer로 노출시킨다 \nexport default countSlice.reducer;","map":{"version":3,"names":["createSlice","countSlice","name","initialState","num","reducers","inc","state","param","console","log","dec","actions","reducer"],"sources":["/Users/gwonseongjun/리액트 프로젝트/r02/src/reducers/countSlice.js"],"sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\n\n// createSlice 객체 여러개 쓸거다 \nconst countSlice = createSlice({\n\n    // 이름 지정 \n    name: \"CountSlice\",\n    // 상태를 관리해야될 데이터의 초기상태 \n    initialState: {num: 5},\n    // reducer 는 동기화 처리 EX : => a바꾸면 b \n    // 객체 스타일 \n    reducers: {\n        // 증가 함수 첫번쨰 파라미터는 무조건 state\n        inc: (state, param) => { \n            console.log(\"inc 가 동작중: \",inc)\n            console.log(\"param 가 동작중: \",param)\n\n            // State안에는 num이 있고 \n            console.log(\"state 가 동작중: \", state)\n            // 새로운 상태를 바꾸기위해 state가 가지고있는 num값을 새로운 상태로 바꿔줌 \n            return {num: state.num +1}\n\n        },\n        dec: (state, param) => {\n            console.log(\"dec가 동작중: \",dec)\n            console.log(\"param 가 동작중: \",param)\n\n              // State안에는 num이 있고 \n              console.log(\"state 가 동작중: \", state)\n              // 새로운 상태를 바꾸기위해 state가 가지고있는 num값을 새로운 상태로 바꿔줌 \n              return {num: state.num -1}\n        }\n    }\n\n    // extraReducer 는 비동기 처리 \n\n})\n\n// 다른곳에서 쓰기위해 객체로 countSlice.actions로 정의 \nexport const {inc, dec} = countSlice.actions\n\n// 외부에 노출은 reducer로 노출시킨다 \nexport default countSlice.reducer\n\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,kBAAkB;;AAE9C;AACA,MAAMC,UAAU,GAAGD,WAAW,CAAC;EAE3B;EACAE,IAAI,EAAE,YAAY;EAClB;EACAC,YAAY,EAAE;IAACC,GAAG,EAAE;EAAC,CAAC;EACtB;EACA;EACAC,QAAQ,EAAE;IACN;IACAC,GAAG,EAAEA,CAACC,KAAK,EAAEC,KAAK,KAAK;MACnBC,OAAO,CAACC,GAAG,CAAC,aAAa,EAACJ,GAAG,CAAC;MAC9BG,OAAO,CAACC,GAAG,CAAC,eAAe,EAACF,KAAK,CAAC;;MAElC;MACAC,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEH,KAAK,CAAC;MACnC;MACA,OAAO;QAACH,GAAG,EAAEG,KAAK,CAACH,GAAG,GAAE;MAAC,CAAC;IAE9B,CAAC;IACDO,GAAG,EAAEA,CAACJ,KAAK,EAAEC,KAAK,KAAK;MACnBC,OAAO,CAACC,GAAG,CAAC,YAAY,EAACC,GAAG,CAAC;MAC7BF,OAAO,CAACC,GAAG,CAAC,eAAe,EAACF,KAAK,CAAC;;MAEhC;MACAC,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEH,KAAK,CAAC;MACnC;MACA,OAAO;QAACH,GAAG,EAAEG,KAAK,CAACH,GAAG,GAAE;MAAC,CAAC;IAChC;EACJ;;EAEA;AAEJ,CAAC,CAAC;;AAEF;AACA,OAAO,MAAM;EAACE,GAAG;EAAEK;AAAG,CAAC,GAAGV,UAAU,CAACW,OAAO;;AAE5C;AACA,eAAeX,UAAU,CAACY,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}