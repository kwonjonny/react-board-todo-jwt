{"ast":null,"code":"import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport { getCookie, setCookie } from \"../util/cookieUtil\";\nimport { postLogin } from \"../api/memberApi\";\n\n// Thunk 는 파라미터를 선언해놓고 람다로 만든다음 그안에서 비동기호 출 \nexport const postLoginThunk = createAsyncThunk('postLoginThunk', params => {\n  return postLogin(params);\n});\nconst loadCookie = () => {\n  const loginObj = getCookie(\"login\");\n  console.log(\"loginObj: \", loginObj);\n  if (!loginObj) {\n    return initState;\n  }\n  return loginObj;\n};\nconst initState = {\n  email: '',\n  signed: false,\n  loading: false\n};\nconst loginSlice = createSlice({\n  name: 'loginSlice',\n  // 초기 결과를 LoadCookie를 해서 그 결과를 loginObj로 \n  initialState: loadCookie(),\n  reducers: {\n    requestLogin: (state, param) => {\n      const payload = param.payload;\n      console.log(\"loginSlice requestLogin: \", payload);\n\n      // 다음으로 유지해야하는 함수를 반한 pure function\n      const loginObj = {\n        email: payload.email,\n        signed: true\n      };\n      setCookie(\"login\", JSON.stringify(loginObj), 1);\n      return loginObj;\n    }\n  },\n  // 이 함수 엑스트라 리듀서는 return을 해주지않아도 그다음상태가 자동으로나옴 \n  extraReducers: builder => {\n    // fulfuilled 파라미터2개 \n    builder.addCase(postLoginThunk.fulfilled, (state, action) => {\n      console.log(\"fulfulled\", action.payload);\n      state.loading = false;\n    }).addCase(postLoginThunk.pending, (state, action) => {\n      console.log(\"pending\");\n      state.loading = true;\n    }).addCase(postLoginThunk.rejected, (state, action) => {\n      console.log(\"rejected\");\n    });\n  }\n});\n\n// // 다른곳에서 쓰기위해 객체로 loginSlice.actions로 정의 \n// export const { requestLogin } = loginSlice.actions\n\n// 외부에 노출은 reducer로 노출시킨다 \nexport default loginSlice.reducer;","map":{"version":3,"names":["createAsyncThunk","createSlice","getCookie","setCookie","postLogin","postLoginThunk","params","loadCookie","loginObj","console","log","initState","email","signed","loading","loginSlice","name","initialState","reducers","requestLogin","state","param","payload","JSON","stringify","extraReducers","builder","addCase","fulfilled","action","pending","rejected","reducer"],"sources":["/Users/gwonseongjun/리액트 프로젝트/r02/src/reducers/loginSlice.js"],"sourcesContent":["import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport { getCookie, setCookie } from \"../util/cookieUtil\";\nimport { postLogin } from \"../api/memberApi\";\n\n\n// Thunk 는 파라미터를 선언해놓고 람다로 만든다음 그안에서 비동기호 출 \nexport const postLoginThunk = createAsyncThunk('postLoginThunk', (params) => {\n    return postLogin(params)\n})\n\nconst loadCookie = () => {\n    const loginObj = getCookie(\"login\")\n\n    console.log(\"loginObj: \", loginObj)\n    if (!loginObj) {\n        return initState;\n    }\n    return loginObj;\n}\n\nconst initState = {\n    email: '',\n    signed: false,\n    loading: false\n}\n\nconst loginSlice = createSlice({\n\n    name: 'loginSlice',\n    // 초기 결과를 LoadCookie를 해서 그 결과를 loginObj로 \n    initialState: loadCookie(),\n    reducers: {\n        requestLogin: (state, param) => {\n            const payload = param.payload\n            console.log(\"loginSlice requestLogin: \", payload)\n\n            // 다음으로 유지해야하는 함수를 반한 pure function\n            const loginObj = { email: payload.email, signed: true }\n\n            setCookie(\"login\", JSON.stringify(loginObj), 1)\n\n            return loginObj;\n        }\n    },\n    // 이 함수 엑스트라 리듀서는 return을 해주지않아도 그다음상태가 자동으로나옴 \n    extraReducers: (builder) => {\n        // fulfuilled 파라미터2개 \n        builder.addCase(postLoginThunk.fulfilled, (state, action) => {\n            console.log(\"fulfulled\", action.payload)\n            state.loading = false;\n        })\n            .addCase(postLoginThunk.pending, (state, action) => {\n                console.log(\"pending\")\n                state.loading = true;\n\n            })\n            .addCase(postLoginThunk.rejected, (state, action) => {\n                console.log(\"rejected\")\n            })\n    }\n})\n\n// // 다른곳에서 쓰기위해 객체로 loginSlice.actions로 정의 \n// export const { requestLogin } = loginSlice.actions\n\n// 외부에 노출은 reducer로 노출시킨다 \nexport default loginSlice.reducer\n\n"],"mappings":"AAAA,SAASA,gBAAgB,EAAEC,WAAW,QAAQ,kBAAkB;AAChE,SAASC,SAAS,EAAEC,SAAS,QAAQ,oBAAoB;AACzD,SAASC,SAAS,QAAQ,kBAAkB;;AAG5C;AACA,OAAO,MAAMC,cAAc,GAAGL,gBAAgB,CAAC,gBAAgB,EAAGM,MAAM,IAAK;EACzE,OAAOF,SAAS,CAACE,MAAM,CAAC;AAC5B,CAAC,CAAC;AAEF,MAAMC,UAAU,GAAGA,CAAA,KAAM;EACrB,MAAMC,QAAQ,GAAGN,SAAS,CAAC,OAAO,CAAC;EAEnCO,OAAO,CAACC,GAAG,CAAC,YAAY,EAAEF,QAAQ,CAAC;EACnC,IAAI,CAACA,QAAQ,EAAE;IACX,OAAOG,SAAS;EACpB;EACA,OAAOH,QAAQ;AACnB,CAAC;AAED,MAAMG,SAAS,GAAG;EACdC,KAAK,EAAE,EAAE;EACTC,MAAM,EAAE,KAAK;EACbC,OAAO,EAAE;AACb,CAAC;AAED,MAAMC,UAAU,GAAGd,WAAW,CAAC;EAE3Be,IAAI,EAAE,YAAY;EAClB;EACAC,YAAY,EAAEV,UAAU,CAAC,CAAC;EAC1BW,QAAQ,EAAE;IACNC,YAAY,EAAEA,CAACC,KAAK,EAAEC,KAAK,KAAK;MAC5B,MAAMC,OAAO,GAAGD,KAAK,CAACC,OAAO;MAC7Bb,OAAO,CAACC,GAAG,CAAC,2BAA2B,EAAEY,OAAO,CAAC;;MAEjD;MACA,MAAMd,QAAQ,GAAG;QAAEI,KAAK,EAAEU,OAAO,CAACV,KAAK;QAAEC,MAAM,EAAE;MAAK,CAAC;MAEvDV,SAAS,CAAC,OAAO,EAAEoB,IAAI,CAACC,SAAS,CAAChB,QAAQ,CAAC,EAAE,CAAC,CAAC;MAE/C,OAAOA,QAAQ;IACnB;EACJ,CAAC;EACD;EACAiB,aAAa,EAAGC,OAAO,IAAK;IACxB;IACAA,OAAO,CAACC,OAAO,CAACtB,cAAc,CAACuB,SAAS,EAAE,CAACR,KAAK,EAAES,MAAM,KAAK;MACzDpB,OAAO,CAACC,GAAG,CAAC,WAAW,EAAEmB,MAAM,CAACP,OAAO,CAAC;MACxCF,KAAK,CAACN,OAAO,GAAG,KAAK;IACzB,CAAC,CAAC,CACGa,OAAO,CAACtB,cAAc,CAACyB,OAAO,EAAE,CAACV,KAAK,EAAES,MAAM,KAAK;MAChDpB,OAAO,CAACC,GAAG,CAAC,SAAS,CAAC;MACtBU,KAAK,CAACN,OAAO,GAAG,IAAI;IAExB,CAAC,CAAC,CACDa,OAAO,CAACtB,cAAc,CAAC0B,QAAQ,EAAE,CAACX,KAAK,EAAES,MAAM,KAAK;MACjDpB,OAAO,CAACC,GAAG,CAAC,UAAU,CAAC;IAC3B,CAAC,CAAC;EACV;AACJ,CAAC,CAAC;;AAEF;AACA;;AAEA;AACA,eAAeK,UAAU,CAACiB,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}